---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';
import { Image } from 'astro:assets';
import placeholder2 from '../../assets/placeholders/blog-placeholder-2.jpg';
import placeholder3 from '../../assets/placeholders/blog-placeholder-3.jpg';
import placeholder4 from '../../assets/placeholders/blog-placeholder-4.jpg';
import placeholder5 from '../../assets/placeholders/blog-placeholder-5.jpg';

const defaultImages = [
	placeholder2,
	placeholder3,
	placeholder4,
	placeholder5,
];

const getRandomImage = () => {
	const randomIndex = Math.floor(Math.random() * defaultImages.length);
	return defaultImages[randomIndex];
};

const posts = (await getCollection('blog')).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);
---

<!doctype html>
<html lang="ko">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} lang="ko" />
		<style>
			main {
				width: 960px;
			}
			.blog-index {
				padding: 1.5rem 0 0;
			}
			.page-title {
				margin: 0 0 1.5rem;
				font-size: clamp(2rem, 4vw, 2.8rem);
				text-align: center;
			}
			.post-grid {
				display: flex;
				flex-wrap: wrap;
				gap: 2rem;
				list-style-type: none;
				margin: 0;
				padding: 0;
			}
			.post-card {
				width: calc(50% - 1rem);
			}
			.post-card--featured {
				width: 100%;
			}
			.post-card a {
				display: block;
				padding: 0.5rem;
				text-decoration: none;
				border-radius: 12px;
				background: var(--surface-elevated);
				color: rgb(var(--gray-dark));
				box-shadow: 0 0 0 1px rgba(var(--gray-light), 0.18);
				transition: box-shadow 0.2s ease, transform 0.2s ease, background-color 0.2s ease;
			}
			.post-card a:focus-visible,
			.post-card a:hover {
				box-shadow: var(--box-shadow);
				background-color: rgba(var(--gray-light), 0.12);
				transform: translateY(-2px);
			}
			.post-card__image {
				display: block;
				width: 100%;
				margin-bottom: 0.75rem;
				border-radius: 12px;
			}
			.post-card__title {
				margin: 0 0 0.5rem;
				color: rgb(var(--black));
				line-height: 1.2;
			}
			.post-card__date {
				margin: 0;
				color: rgb(var(--gray));
				font-size: 0.95rem;
			}
			.post-card__tags {
				display: flex;
				flex-wrap: wrap;
				gap: 0.5rem;
				margin: 0.75rem 0 0;
				padding: 0;
				list-style: none;
			}
			.post-card__tags li {
				display: inline-flex;
				align-items: center;
				padding: 0.25rem 0.5rem;
				border-radius: 999px;
				background: rgba(var(--accent), 0.12);
				color: var(--accent-dark);
				font-size: 0.85rem;
				font-weight: 600;
			}
			@media (max-width: 960px) {
				main {
					width: 100%;
				}
				.post-grid {
					gap: 1.25rem;
				}
				.post-card {
					width: 100%;
				}
			}
		</style>
	</head>
	<body>
		<Header />
		<main>
			<section class="blog-index" aria-labelledby="blog-title">
				<h1 id="blog-title" class="page-title">Blog</h1>
				<ul class="post-grid">
					{
					posts.map((post, index) => {
						const isFeatured = index === 0;
						const cardClass = isFeatured ? 'post-card post-card--featured' : 'post-card';
						const pubDate = post.data.pubDate instanceof Date
							? post.data.pubDate
							: new Date(post.data.pubDate);
						return (
								<li class={cardClass}>
									<a href={`/blog/${post.id}/`}>
										<Image
											src={post.data.heroImage ?? getRandomImage()}
											alt=""
											widths={isFeatured ? [720, 960, 1200] : [480, 720, 960]}
											sizes={
												isFeatured
													? '(max-width: 960px) 100vw, 960px'
													: '(max-width: 960px) 100vw, 480px'
											}
											loading={index === 0 ? 'eager' : 'lazy'}
											decoding="async"
											class="post-card__image"
										/>
										<h2 class="post-card__title">{post.data.title}</h2>
										<p class="post-card__date">
					<time datetime={pubDate.toISOString()}>
												<FormattedDate date={post.data.pubDate} />
											</time>
										</p>
										{post.data.tags.length > 0 && (
											<ul class="post-card__tags">
												{post.data.tags.map((tag) => (
													<li>{tag}</li>
												))}
											</ul>
										)}
									</a>
								</li>
							);
					})
				}
				</ul>
			</section>
		</main>
		<Footer />
	</body>
</html>
